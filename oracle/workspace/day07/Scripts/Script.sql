--외부 조인
--JOIN일 떄 선행 또는 후행 중 하나의 테이블 정보를 모두 확인하고 싶을 때 사용한다.

--STADIUM 테이블에서 홈 팀인 팀 정보 조회, 홈 팀이 없어도 경기장은 모두 조회
SELECT * FROM STADIUM;
SELECT * FROM TEAM;

SELECT NVL(T.TEAM_ID,'공용') TEAM_ID, STADIUM_NAME FROM
TEAM T RIGHT OUTER JOIN STADIUM S
ON T.STADIUM_ID = S.STADIUM_ID;

/*브론즈*/
/*EMPLOYEES 테이블에서 JOB_ID가 SA_REP인 사원 전체 조회*/

-- 내가 푼 것
SELECT E.*
FROM JOBS J JOIN EMPLOYEES E
ON J.JOB_ID = E.JOB_ID AND E.JOB_ID = 'SA_REP';

--강사님이 푼 것
SELECT * FROM EMPLOYEES
WHERE JOB_ID = 'SA_REP';

/*실버*/
/*PLAYER 테이블에서 팀 별 최대 몸무게*/
SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER
GROUP BY TEAM_ID
ORDER BY TEAM_ID;

/*골드*/
/*AVG 함수를 쓰지 않고 PLAYER 테이블에서 선수들의 평균 키 구하기*/
SELECT SUM(HEIGHT) / COUNT(HEIGHT) FROM PLAYER
WHERE HEIGHT IS NOT NULL;

/*플래티넘*/
/*DEPT 테이블의 LOC별 평균 급여를 반올림한 값과 각 LOC별 SAL 총 합을 조회, 반올림: ROUND()*/
-- 내가 푼 것
SELECT D.LOC, ROUND(AVG(SAL), 2), SUM(SAL)  
FROM DEPT D JOIN EMP E
ON D.DEPTNO = E.DEPTNO
GROUP BY D.LOC;
-- 강사님이 푼 것
SELECT D.LOC, NVL(ROUND(AVG(SAL), 2), 0) "AVG(SAL)", NVL(SUM(SAL), 0) "SUM(SAL)"  
FROM DEPT D LEFT JOIN EMP E
ON D.DEPTNO = E.DEPTNO
GROUP BY D.LOC;

/*다이아*/
/*PLAYER 테이블에서 팀 별 최대 몸무게인 선수의 전체 정보와 팀 명, 팀 전화번호 조회*/
SELECT P.*, TEAM_NAME, TEL FROM
TEAM T JOIN
(SELECT P2.* FROM
(SELECT TEAM_ID, MAX(WEIGHT) W FROM PLAYER
GROUP BY TEAM_ID) P1
JOIN PLAYER P2
ON P1.TEAM_ID = P2.TEAM_ID AND P1.W = P2.WEIGHT) P
ON P.TEAM_ID = T.TEAM_ID;

/*마스터*/
/*EMP 테이블에서 HIREDATE가 FORD의 입사년도와 같은 사원 전체 정보 조회*/

-- 본인이 푼 것(문제 잘못 이해)
SELECT E2.* FROM
(SELECT * FROM EMP
WHERE ENAME = 'FORD') E1
JOIN EMP E2
ON E1.HIREDATE = E2.HIREDATE;

--강사님이 푼 것
SELECT * FROM EMP
WHERE TO_CHAR(HIREDATE, 'YYYY') = (SELECT TO_CHAR(HIREDATE, 'YYYY') FROM EMP WHERE ENAME = 'FORD');


/*EMPLOYEES 테이블에서 사원의 매니저 이름, 사원의 이름 조회, 매니저가 없는 사원은 본인이 매니저임을 표시*/
--본인이 푼 것
SELECT E1.EMPLOYEE_ID 사번, E1.FIRST_NAME 사원, NVL(E2.FIRST_NAME, E1.FIRST_NAME) 매니저
FROM EMPLOYEES E1 LEFT OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
ORDER BY E1.EMPLOYEE_ID;

--강사님이 푼것
SELECT 
NVL(E2.LAST_NAME, E1.LAST_NAME) || NVL(E2.FIRST_NAME, E1.FIRST_NAME) "매니저 이름", 
E1.LAST_NAME || E1.FIRST_NAME "사원 이름" 
FROM EMPLOYEES E1 LEFT OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

--다른 수강생 분이 푼 것
SELECT E2.LAST_NAME || E2.FIRST_NAME "매니저 이름", E1.LAST_NAME || E1.FIRST_NAME "사원 이름" 
FROM EMPLOYEES E1 JOIN EMPLOYEES E2
ON NVL(E1.MANAGER_ID, E1.EMPLOYEE_ID) = E2.EMPLOYEE_ID;

/*EMPLOYEES에서 관리부서별 매니저와 소속부서별 사원 조회*/
SELECT D.DEPARTMENT_NAME, D.MANAGER_NAME, E.LAST_NAME || E.FIRST_NAME "EMPLOYEE_NAME" FROM
(
   SELECT E.DEPARTMENT_ID, DEPARTMENT_NAME, E.LAST_NAME || E.FIRST_NAME "MANAGER_NAME"
   FROM DEPARTMENTS D JOIN EMPLOYEES E
   ON D.MANAGER_ID = E.EMPLOYEE_ID
)D
RIGHT OUTER JOIN EMPLOYEES E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
ORDER BY DEPARTMENT_NAME;


/*EMPLOYEES에서 각 사원별로 JOB_ID(매니저)와 JOB_ID(사원) 조회*/
SELECT E2.LAST_NAME, E1.JOB_ID, E2.JOB_ID FROM
(
	SELECT JOB_ID, MANAGER_ID
	FROM EMPLOYEES
	GROUP BY JOB_ID, MANAGER_ID
) E1 FULL OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;